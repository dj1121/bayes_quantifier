exp1.replication.trials=subset.data.frame(exp1.replication.trials, exp1.replication.trials$workerid!="81")
exp1.replication.trials=subset.data.frame(exp1.replication.trials, exp1.replication.trials$workerid!="82")
exp1.replication.trials=subset.data.frame(exp1.replication.trials, exp1.replication.trials$workerid!="83")
exp1.replication.trials=subset.data.frame(exp1.replication.trials, exp1.replication.trials$workerid!="85")
exp1.replication.trials=subset.data.frame(exp1.replication.trials, exp1.replication.trials$workerid!="86")
exp1.replication.trials=subset.data.frame(exp1.replication.trials, exp1.replication.trials$workerid!="87")
#PARTICIPANTS EXCLUDED SEE APPENDIX
############################ EXCLUDED RTs ###########################
exp1.replication.trials=subset.data.frame(exp1.replication.trials, exp1.replication.trials$read_and_decide_time > 300)
############################ QUANTIFIERS ###########################
rmany=subset.data.frame(exp1.replication.trials, exp1.replication.trials$quant=="\"Many\"")
rfew=subset.data.frame(exp1.replication.trials, exp1.replication.trials$quant=="\"Few\"")
rmost=subset.data.frame(exp1.replication.trials, exp1.replication.trials$quant=="\"Most\"")
rmth=subset.data.frame(exp1.replication.trials, exp1.replication.trials$quant=="\"More than half\"")
rfth=subset.data.frame(exp1.replication.trials, exp1.replication.trials$quant=="\"Fewer than half\"")
################# EXCULUDE TO SHORT AND SLOWE OUTLIERS RESPONSES #################
######## MANY
rmany_yes=subset.data.frame(rmany, rmany$response==1)
rcut_many_yes_1=mean(rmany_yes$read_and_decide_time)+2*sd(rmany_yes$read_and_decide_time)
rmany_yes_1=subset.data.frame(rmany_yes, rmany_yes$read_and_decide_time<rcut_many_yes_1)
rmany_no=subset.data.frame(rmany, rmany$response==0)
rcut_many_no_1=mean(rmany_no$read_and_decide_time)+2*sd(rmany_no$read_and_decide_time)
rmany_no_1=subset.data.frame(rmany_no, rmany_no$read_and_decide_time<rcut_many_no_1)
rmany2=rbind(rmany_no_1, rmany_yes_1)
######## MOST
rmost_yes=subset.data.frame(rmost, rmost$response==1)
rcut_most_yes_1=mean(rmost_yes$read_and_decide_time)+2*sd(rmost_yes$read_and_decide_time)
rmost_yes_1=subset.data.frame(rmost_yes, rmost_yes$read_and_decide_time<rcut_most_yes_1)
rmost_no=subset.data.frame(rmost, rmost$response==0)
rcut_most_no_1=mean(rmost_no$read_and_decide_time)+2*sd(rmost_no$read_and_decide_time)
rmost_no_1=subset.data.frame(rmost_no, rmost_no$read_and_decide_time<rcut_most_no_1)
rmost2=rbind(rmost_no_1, rmost_yes_1)
######## MTH
rmth_yes=subset.data.frame(rmth, rmth$response==1)
rcut_mth_yes_1=mean(rmth_yes$read_and_decide_time)+2*sd(rmth_yes$read_and_decide_time)
rmth_yes_1=subset.data.frame(rmth_yes, rmth_yes$read_and_decide_time<rcut_mth_yes_1)
rmth_no=subset.data.frame(rmth, rmth$response==0)
rcut_mth_no_1=mean(rmth_no$read_and_decide_time)+2*sd(rmth_no$read_and_decide_time)
rmth_no_1=subset.data.frame(rmth_no, rmth_no$read_and_decide_time<rcut_mth_no_1)
rmth2=rbind(rmth_no_1, rmth_yes_1)
######## FTH
rfth_yes=subset.data.frame(rfth, rfth$response==1)
rcut_fth_yes_1=mean(rfth_yes$read_and_decide_time)+2*sd(rfth_yes$read_and_decide_time)
rfth_yes_1=subset.data.frame(rfth_yes, rfth_yes$read_and_decide_time<rcut_fth_yes_1)
rfth_no=subset.data.frame(rfth, rfth$response==0)
rcut_fth_no_1=mean(rfth_no$read_and_decide_time)+2*sd(rfth_no$read_and_decide_time)
rfth_no_1=subset.data.frame(rfth_no, rfth_no$read_and_decide_time<rcut_fth_no_1)
rfth2=rbind(rfth_no_1, rfth_yes_1)
######## FEW
rfew_yes=subset.data.frame(rfew, rfew$response==1)
rcut_few_yes_1=mean(rfew_yes$read_and_decide_time)+2*sd(rfew_yes$read_and_decide_time)
rfew_yes_1=subset.data.frame(rfew_yes, rfew_yes$read_and_decide_time<rcut_few_yes_1)
rfew_no=subset.data.frame(rfew, rfew$response==0)
rcut_few_no_1=mean(rfew_no$read_and_decide_time)+2*sd(rfew_no$read_and_decide_time)
rfew_no_1=subset.data.frame(rfew_no, rfew_no$read_and_decide_time<rcut_few_no_1)
rfew2=rbind(rfew_no_1, rfew_yes_1)
############################# THRESHOLDS ESTIMATION ###############################
model <- function(x){
try(coef(nls(response ~ 1/(1+exp((xmid-percent)/scal)), data=x,
start=list(xmid=50,scal=4))))
}
fitted.linear.model <- dlply(rmany2, .(workerid), model)
x=fitted.linear.model[-(which(sapply(fitted.linear.model,is.character),arr.ind=TRUE))]
y=fitted.linear.model[(which(sapply(fitted.linear.model,is.character),arr.ind=TRUE))]
df <- data.frame(Reduce(rbind, x))
df$workerid=names(x)
vector=as.vector(names(x))
certain <- rmany2[!rmany2$workerid %in% vector, ]
threshold <- function(n){
(max(n$percent[which(n$response=="0")])+min(n$percent[which(n$response=="1")]))/2
}
certained.fitted =dlply(certain, .(workerid), threshold)
df_cert <- data.frame(Reduce(rbind, certained.fitted))
df_cert$workerid=names(y)
colnames(df_cert)[1] <- "xmid"
df_cert$scal=rep(c(0))
df_all=rbind(df_cert, df[,c(1:3)])
df_all$workerid=as.numeric(df_all$workerid)
df_all_new=df_all[order(df_all[,2]),]
df_all$worerid[which(df_all$xmid>100)]
##### MOST ##########
fitted.linear.model.most <- dlply(rmost2, .(workerid), model)
x.most=fitted.linear.model.most[-(which(sapply(fitted.linear.model.most,is.character),arr.ind=TRUE))]
y.most=fitted.linear.model.most[(which(sapply(fitted.linear.model.most,is.character),arr.ind=TRUE))]
print(x.most)
df.most <- data.frame(Reduce(rbind, x.most))
df.most$workerid=names(x.most)
vector.most=as.vector(names(x.most))
certain.most <- rmost2[!rmost2$workerid %in% vector.most, ]
certained.fitted.most =dlply(certain.most, .(workerid), threshold)
df_cert.most <- data.frame(Reduce(rbind, certained.fitted.most))
df_cert.most$workerid=names(y.most)
colnames(df_cert.most)[1] <- "xmid"
df_cert.most$scal=rep(c(0))
df_cert.most[,c("xmid", "scal", "workerid")]
df_all.most=rbind(df_cert.most, df.most[,c(1:3)])
df_all.most$workerid=as.numeric(df_all.most$workerid)
df_all_new.most=df_all.most[order(df_all.most[,2]),]
df_all_new.most$workerid[which(df_all_new.most$xmid<0)]
df_all_new.most$workerid[which(df_all_new.most$xmid>100)]
#[1] 76
##### MTH ########
fitted.linear.model.mth <- dlply(rmth2, .(workerid), model)
x.mth=fitted.linear.model.mth[-(which(sapply(fitted.linear.model.mth,is.character),arr.ind=TRUE))]
y.mth=fitted.linear.model.mth[(which(sapply(fitted.linear.model.mth,is.character),arr.ind=TRUE))]
df.mth <- data.frame(Reduce(rbind, x.mth))
df.mth$workerid=names(x.mth)
vector.mth=as.vector(names(x.mth))
certain.mth <- rmth2[!rmth2$workerid %in% vector.mth, ]
certained.fitted.mth =dlply(certain.mth, .(workerid), threshold)
df_cert.mth <- data.frame(Reduce(rbind, certained.fitted.mth))
df_cert.mth$workerid=names(y.mth)
colnames(df_cert.mth)[1] <- "xmid"
df_cert.mth$scal=rep(c(0))
df_cert.mth[,c("xmid", "scal", "workerid")]
df_all.mth=rbind(df_cert.mth, df.mth[,c(1:3)])
df_all.mth$workerid=as.numeric(df_all.mth$workerid)
df_all_new.mth=df_all.mth[order(df_all.mth[,2]),]
df_all_new.mth$workerid[which(df_all_new.mth$xmid<0)]
#[1] 76
df_all_new.mth$workerid[which(df_all_new.mth$xmid>100)]
##### FEW ##########
model.few <- function(x){
try(coef(nls(response ~ 1/(1+exp((xmid-percent)/scal)), data=x,
start=list(xmid=41,scal=-5))))
}
fitted.linear.model.few <- dlply(rfew2, .(workerid), model.few)
xfew=fitted.linear.model.few[-(which(sapply(fitted.linear.model.few,is.character),arr.ind=TRUE))]
yfew=fitted.linear.model.few[(which(sapply(fitted.linear.model.few,is.character),arr.ind=TRUE))]
df.few <- data.frame(Reduce(rbind, xfew))
df.few$workerid=names(xfew)
vector.few=as.vector(names(xfew))
certain.few <- rfew2[!rfew2$workerid %in% vector.few, ]
threshold.few <- function(n){
(min(n$percent[which(n$response=="0")])+max(n$percent[which(n$response=="1")]))/2
}
certained.fitted.few =dlply(certain.few, .(workerid), threshold.few)
df_cert.few <- data.frame(Reduce(rbind, certained.fitted.few))
df_cert.few$workerid=names(yfew)
colnames(df_cert.few)[1] <- "xmid"
df_cert.few$scal=rep(c(0))
df_all.few=rbind(df_cert.few, df.few[,c(1:3)])
df_all.few$workerid=as.numeric(df_all.few$workerid)
df_all_new.few=df_all.few[order(df_all.few[,2]),]
df_all_new.few$workerid[which(df_all_new.few$xmid<0)]
#[1] 27 76
df_all_new.few$workerid[which(df_all_new.few$xmid>100)]
###### FTH ########
fitted.linear.model.fth <- dlply(rfth2, .(workerid), model.few)
xfth=fitted.linear.model.fth[-(which(sapply(fitted.linear.model.fth,is.character),arr.ind=TRUE))]
yfth=fitted.linear.model.fth[(which(sapply(fitted.linear.model.fth,is.character),arr.ind=TRUE))]
df.fth <- data.frame(Reduce(rbind, xfth))
df.fth$workerid=names(xfth)
vector.fth=as.vector(names(xfth))
certain.fth <- rfth2[!rfth2$workerid %in% vector.fth, ]
certained.fitted.fth =dlply(certain.fth, .(workerid), threshold.few)
df_cert.fth <- data.frame(Reduce(rbind, certained.fitted.fth))
df_cert.fth$workerid=names(yfth)
colnames(df_cert.fth)[1] <- "xmid"
df_cert.fth$scal=rep(c(0))
df_all.fth=rbind(df_cert.fth, df.fth[,c(1:3)])
df_all.fth$workerid=as.numeric(df_all.fth$workerid)
df_all_new.fth=df_all.fth[order(df_all.fth[,2]),]
df_all_new.fth$workerid[which(df_all_new.fth$xmid<0)]
df_all_new.fth$workerid[which(df_all_new.fth$xmid>100)]
#[1] 27
##### PARTICIPANTS 27 AND 76 HAD THRESHOLD OUTSIDE RANGE 0-100
#######################################################################
############### H1 TESTING LOGISTIC REGRESSION ################
#######################################################################
######## COMAPRISON OF MEAN THRESHOLDS #######
df_all_new=cbind(df_all_new, quantifier="many")
df_all_new.few=cbind(df_all_new.few, quantifier="few")
df_all_new.fth=cbind(df_all_new.fth, quantifier="FTH")
df_all_new.most=cbind(df_all_new.most, quantifier="most")
df_all_new.mth=cbind(df_all_new.mth, quantifier="MTH")
df_all_new_plot=rbind(df_all_new, df_all_new.few, df_all_new.fth, df_all_new.most, df_all_new.mth)
df_all_new_plot=subset.data.frame(df_all_new_plot, df_all_new_plot$workerid!="27")
df_all_new_plot=subset.data.frame(df_all_new_plot, df_all_new_plot$workerid!="76")
df_all_new$workerid=as.factor(df_all_new$workerid)
rmany2$workerid=as.factor(rmany2$workerid)
rmany2=left_join(rmany2, df_all_new)
df_all_new.most$workerid=as.factor(df_all_new.most$workerid)
rmost2$workerid=as.factor(rmost2$workerid)
rmost2=left_join(rmost2, df_all_new.most)
df_all_new.mth$workerid=as.factor(df_all_new.mth$workerid)
rmth2$workerid=as.factor(rmth2$workerid)
rmth2=left_join(rmth2, df_all_new.mth)
df_all_new.few$workerid=as.factor(df_all_new.few$workerid)
rfew2$workerid=as.factor(rfew2$workerid)
rfew2=left_join(rfew2, df_all_new.few)
df_all_new.fth$workerid=as.factor(df_all_new.fth$workerid)
rfth2$workerid=as.factor(rfth2$workerid)
rfth2=left_join(rfth2, df_all_new.fth)
rmth22<-rmth2
rmth22$response_rec=ifelse(rmth22$percent>rmth22$xmid & rmth22$response==1, "correct",
ifelse(rmth22$percent>rmth22$xmid & rmth22$response==0, "incorrect",
ifelse(rmth22$percent<rmth22$xmid & rmth22$response==1, "incorrect", "correct")))
rmth22$response_rec=as.factor(rmth22$response_rec)
rmth22=subset.data.frame(rmth22, rmth22$workerid!="27")
rmth22=subset.data.frame(rmth22, rmth22$workerid!="76")
rmth222<-subset.data.frame(rmth22, rmth22$response_rec=="correct")
rmth222$response_t_f=ifelse(rmth222$percent>rmth222$xmid & rmth222$response==1, "true", "false")
rmth222$response_t_f=as.factor(rmth222$response_t_f)
rmth222$zpercent=scale(rmth222$percent)
rmth222$zxmid=scale(rmth222$xmid)
##### MOST #######
rmost22<-rmost2
rmost22$response_rec=ifelse(rmost22$percent>rmost22$xmid & rmost22$response==1, "correct",
ifelse(rmost22$percent>rmost22$xmid & rmost22$response==0, "incorrect",
ifelse(rmost22$percent<rmost22$xmid & rmost22$response==1, "incorrect", "correct")))
rmost22$response_rec=as.factor(rmost22$response_rec)
rmost22=subset.data.frame(rmost22, rmost22$workerid!="27")
rmost22=subset.data.frame(rmost22, rmost22$workerid!="76")
rmost222<-subset.data.frame(rmost22, rmost22$response_rec=="correct")
rmost222$response_t_f=ifelse(rmost222$percent>rmost222$xmid & rmost222$response==1, "true", "false")
rmost222$response_t_f=as.factor(rmost222$response_t_f)
rmost222$zpercent=scale(rmost222$percent)
rmost222$zxmid=scale(rmost222$xmid)
############### COMBAIN MOST AND MORE THAN HALF ###############
data_mm<-rbind(rmost222, rmth222)
#PLOT THE EFFECCT
model_mm3.1=lmer(read_and_decide_time~zpercent*quant*response_t_f
+(1+zpercent|workerid), data=data_mm, REML = FALSE)
rmost2222.plot=subset.data.frame(rmost222, rmost222$response_t_f=="true")
rmth2222.plot=subset.data.frame(rmth222, rmth222$response_t_f=="true")
rmost_above=apply(with(rmost2222.plot, tapply(read_and_decide_time, list(workerid, percent), mean)), 2, mean, na.rm=TRUE)
rmth_above=apply(with(rmth2222.plot, tapply(read_and_decide_time, list(workerid, percent), mean)), 2, mean, na.rm=TRUE)
rmost_df=data.frame(percent=c(42,45,47:49,51:98), mean=rmost_above, Q=rep(c("Most"), each=53), truth=rep(c("true"), each=53))
rmth_df=data.frame(percent=c(39, 51:98), mean=rmth_above, Q=rep(c("More than half"), each=49), truth=rep(c("true"), each=49))
rmost2222.plot2=subset.data.frame(rmost222, rmost222$response_t_f=="false")
rmth2222.plot2=subset.data.frame(rmth222, rmth222$response_t_f=="false")
rmost_below=apply(with(rmost2222.plot2, tapply(read_and_decide_time, list(workerid, percent), mean)), 2, mean, na.rm=TRUE)
rmth_below=apply(with(rmth2222.plot2, tapply(read_and_decide_time, list(workerid, percent), mean)), 2, mean, na.rm=TRUE)
rmost_df2=data.frame(percent=c(1:49, 51:67), mean=rmost_below, Q=rep(c("Most"), each=66), truth=rep(c("false"), each=66))
rmth_df2=data.frame(percent=c(1:49, 51, 52, 54), mean=rmth_below, Q=rep(c("More than half"), each=52), truth=rep(c("false"), each=52))
mm_above <- rbind(rmost_df, rmth_df)
mm_below <- rbind(rmost_df2, rmth_df2)
mm_plot <- rbind(mm_above, mm_below)
library(effects)
Inter.SD <- effect(c("zpercent*quant*response_t_f"), model_mm3.1,
xlevels=list(zpercent=runif(100, -2, 2),
response_t_f=c("true", "false"),
quant=c("most", "mth")))
Inter.SD <- as.data.frame(Inter.SD)
Inter.SD_most <- subset.data.frame(Inter.SD, Inter.SD$quant=="\"Most\"")
Inter.SD_mth <- subset.data.frame(Inter.SD, Inter.SD$quant=="\"More than half\"")
Inter.SD_most_t <- subset.data.frame(Inter.SD_most, Inter.SD_most$response_t_f=="true")
Inter.SD_most_f <- subset.data.frame(Inter.SD_most, Inter.SD_most$response_t_f=="false")
Inter.SD_mth_t <- subset.data.frame(Inter.SD_mth, Inter.SD_mth$response_t_f=="true")
Inter.SD_mth_f <- subset.data.frame(Inter.SD_mth, Inter.SD_mth$response_t_f=="false")
#check z-scored cut-off points
-0.30237336*26.9384+50.14545
0.62566989*26.9384+50.14545
-0.41373855*26.9384+50.14545
0.14308740*26.9384+50.14545
Inter.SD_most_t <- subset.data.frame(Inter.SD_most_t, Inter.SD_most_t$zpercent>(-0.30237336))
Inter.SD_most_f <- subset.data.frame(Inter.SD_most_f, Inter.SD_most_f$zpercent<0.62566989)
Inter.SD_mth_t <- subset.data.frame(Inter.SD_mth_t, Inter.SD_mth_t$zpercent>(-0.41373855))
Inter.SD_mth_f <- subset.data.frame(Inter.SD_mth_f, Inter.SD_mth_f$zpercent<0.14308740)
Inter.SD2 = rbind(Inter.SD_most_t, Inter.SD_most_f, Inter.SD_mth_t, Inter.SD_mth_f)
#Inter.SD2=Inter.SD2 %>% mutate_each(funs(str_replace_all(., "\"", "")))
sd(mm_plot$percent)
mean(mm_plot$percent)
#revers z-score
Inter.SD2$percent <- Inter.SD2$zpercent*26.9384 + 50.14545
mm_plot$zpercent <- scale(mm_plot$percent)
ggplot(mm_plot, aes(x=percent, y=mean))+
geom_point(aes(shape=truth, color = Q))+
theme_bw()+
scale_y_continuous(name= "mean RTs [ms]",
limits = c(500, 1800))+
scale_x_continuous(name="proportion [%]",
limits = c(0, 100))+
geom_line(data=Inter.SD2, aes(x=percent, y=fit, linetype = response_t_f, color= quant, group=interaction(quant, response_t_f)), size=1)+
scale_color_manual(breaks= c("More than half", "Most"), values = c("#3399FF", "#FF3333", "#3399FF", "#FF3333"))+
scale_linetype_manual(values = c("dashed", "solid"), guide=FALSE)+
scale_shape_manual(values = c(16,17), guide=FALSE)+
labs(color = "Quantifier")+
#  scale_fill_discrete(name = "Quantifiers", labels = c("MTH", "M", "", ""))+
theme(
axis.title.x = element_text(size=12, face="bold"),
axis.title.y = element_text(size=12, face="bold"),
legend.title = element_text(size=12, face="bold"),
legend.text = element_text(size=12),
axis.text.y = element_text(size=12),
axis.text.x = element_text(size=12),
legend.position = "bottom"
)
ggsave("paper_1_regression2.png")
View(mm_above)
View(rmost222)
min(rmost222$percent[which(rmost222$response==1)])
min(df_all_new_plot$xmid[which(df_all_new_plot$quantifier=="most"])
min(df_all_new_plot$xmid[which(df_all_new_plot$quantifier=="most")])
min(df_all_new_plot$xmid[which(df_all_new_plot$quantifier=="mth")])
min(df_all_new_plot$xmid[which(df_all_new_plot$quantifier=="more than half")])
######## EXP 1 OROGINAL #########
####### HISTOGRAM WITH THRESHOLDS ########
rmu <- ddply(df_all_new_plot, "quantifier", summarise, grp.mean=min(xmid))
head(rmu)
View(rmost222)
rmost222$workerid[which(rmost222$xmid==32.5)]
min(rmost222$xmid)
rmost222$workerid[which(rmost222$xmid==37.39)]
unique(rmost222$xmid)
-1*26.9384 + 50.14545
#check z-scored cut-off points
-0.30237336*26.9384+50.14545
0.62566989*26.9384+50.14545
-0.41373855*26.9384+50.14545
0.14308740*26.9384+50.14545
load("/Users/sramoto/Desktop/monotonicity_ddm/fit-log-mth_fth_BMa_new.Rdata")
#non-decision time
#fit = subset.data.frame(fit, fit$pp!="76")
#fit = subset.data.frame(fit, fit$pp!="27")
shapiro.test(fit$Ter[which(fit$cond=="mth")])
#non-decision time
#fit = subset.data.frame(fit, fit$pp!="76")
#fit = subset.data.frame(fit, fit$pp!="27")
shapiro.test(fit$Ter[which(fit$cond=="fth")])
load("/Users/sramoto/Desktop/monotonicity_ddm/fit-log-Fabian_BMa_new.Rdata")
#non-decision time
#fit = subset.data.frame(fit, fit$pp!="76")
#fit = subset.data.frame(fit, fit$pp!="27")
shapiro.test(fit$Ter[which(fit$cond=="fth")])
#non-decision time
#fit = subset.data.frame(fit, fit$pp!="76")
#fit = subset.data.frame(fit, fit$pp!="27")
shapiro.test(fit$Ter[which(fit$cond=="mth")])
wilcox.test(fit$Ter[which(fit$cond=="mth")], fit$Ter[which(fit$cond=="fth")], paired=TRUE)
load("/Users/sramoto/Desktop/monotonicity_ddm/fit-log-mth_fth_BMa_new.Rdata")
wilcox.test(fit$Ter[which(fit$cond=="mth")], fit$Ter[which(fit$cond=="fth")], paired=TRUE)
#drift rate
fit$diff = fit$v - fit$K
fit$absv = abs(fit$v)
t.test(fit$K[which(fit$cond=="mth")], fit$absv[which(fit$cond=="mth")], paired = TRUE)
t.test(fit$absv[which(fit$cond=="fth")], fit$absv[which(fit$cond=="mth")], paired = TRUE)
t.test(fit$diff[which(fit$cond=="fth")], fit$diff[which(fit$cond=="mth")], paired = TRUE)
#fit$diff_1 = fit$absv + fit$K
shapiro.test(fit$diff[which(fit$cond=="mth")])
#fit$diff_1 = fit$absv + fit$K
shapiro.test(fit$diff[which(fit$cond=="fth")])
wilcox.test(fit$diff[which(fit$cond=="fth")], fit$diff[which(fit$cond=="mth")], paired = TRUE)
load("/Users/sramoto/Desktop/monotonicity_ddm/fit-log-Fabian_BMa_new.Rdata")
#drift rate
fit$diff = fit$v - fit$K
#fit$diff_1 = fit$absv + fit$K
shapiro.test(fit$diff[which(fit$cond=="fth")])
#fit$diff_1 = fit$absv + fit$K
shapiro.test(fit$diff[which(fit$cond=="mth")])
wilcox.test(fit$diff[which(fit$cond=="fth")], fit$diff[which(fit$cond=="mth")], paired = TRUE)
t.test(fit$diff[which(fit$cond=="fth")], fit$diff[which(fit$cond=="mth")], paired = TRUE)
load("/Users/sramoto/Desktop/monotonicity_ddm/fit-log-mth_fth_BM_new.Rdata")
wilcox.test(fit$a[which(fit$cond=="mth")], fit$a[which(fit$cond=="fth")], paired = TRUE)
t.test(fit$a[which(fit$cond=="mth")], fit$a[which(fit$cond=="fth")], paired = TRUE)
shapiro.test(fit$a[which(fit$cond=="mth")])
shapiro.test(fit$a[which(fit$cond=="fth")])
load("/Users/sramoto/Desktop/monotonicity_ddm/fit-log-Fabian_BMa_new.Rdata")
wilcox.test(fit$Ter[which(fit$cond=="mth")], fit$Ter[which(fit$cond=="fth")], paired=TRUE)
#drift rate
fit$diff = fit$v - fit$K
wilcox.test(fit$diff[which(fit$cond=="fth")], fit$diff[which(fit$cond=="mth")], paired = TRUE)
load("/Users/sramoto/Desktop/monotonicity_ddm/fit-log-mth_fth_BMa_new.Rdata")
wilcox.test(fit$Ter[which(fit$cond=="mth")], fit$Ter[which(fit$cond=="fth")], paired=TRUE)
wilcox.test(fit$diff[which(fit$cond=="fth")], fit$diff[which(fit$cond=="mth")], paired = TRUE)
#drift rate
fit$diff = fit$v - fit$K
wilcox.test(fit$diff[which(fit$cond=="fth")], fit$diff[which(fit$cond=="mth")], paired = TRUE)
#starting point
fit$staring <- 1- fit$z
t.test(fit$z[which(fit$cond=="mth")], fit$staring[which(fit$cond=="fth")], paired = TRUE)
wilcox.test(fit$z[which(fit$cond=="mth")], fit$staring[which(fit$cond=="fth")], paired = TRUE)
load("/Users/sramoto/Desktop/monotonicity_ddm/fit-log-Fabian_BMa_new.Rdata")
wilcox.test(fit$Ter[which(fit$cond=="mth")], fit$Ter[which(fit$cond=="fth")], paired=TRUE)
#drift rate
fit$diff = fit$v - fit$K
wilcox.test(fit$diff[which(fit$cond=="fth")], fit$diff[which(fit$cond=="mth")], paired = TRUE)
#starting point
fit$staring <- 1- fit$z
wilcox.test(fit$z[which(fit$cond=="mth")], fit$staring[which(fit$cond=="fth")], paired = TRUE)
t.test(fit$z[which(fit$cond=="mth")], fit$staring[which(fit$cond=="fth")], paired = TRUE)
load("/Users/sramoto/Desktop/monotonicity_ddm/fit-log-mth_fth_new.Rdata")
wilcox.test(fit$B[which(fit$cond=="mth")], fit$B[which(fit$cond=="fth")], paired = TRUE)
load("/Users/sramoto/Desktop/monotonicity_ddm/fit-log-mth_fth_B_new.Rdata")
wilcox.test(fit$M[which(fit$cond=="mth")], fit$M[which(fit$cond=="fth")], paired = TRUE)
load("/Users/sramoto/Desktop/monotonicity_ddm/fit-log-mth_fth_BM_new.Rdata")
wilcox.test(fit$a[which(fit$cond=="mth")], fit$a[which(fit$cond=="fth")], paired = TRUE)
load("/Users/sramoto/Desktop/monotonicity_ddm/fit-log-mth_fth_BMa_new.Rdata")
wilcox.test(fit$Ter[which(fit$cond=="mth")], fit$Ter[which(fit$cond=="fth")], paired=TRUE)
#drift rate
fit$diff = fit$v - fit$K
wilcox.test(fit$diff[which(fit$cond=="fth")], fit$diff[which(fit$cond=="mth")], paired = TRUE)
#starting point
fit$staring <- 1- fit$z
wilcox.test(fit$z[which(fit$cond=="mth")], fit$staring[which(fit$cond=="fth")], paired = TRUE)
load("/Users/sramoto/Desktop/monotonicity_ddm/fit-log-mth_fth_BMa_new.Rdata")
wilcox.test(fit$Ter[which(fit$cond=="mth")], fit$Ter[which(fit$cond=="fth")], paired=TRUE)
#drift rate
fit$diff = fit$v - fit$K
wilcox.test(fit$diff[which(fit$cond=="fth")], fit$diff[which(fit$cond=="mth")], paired = TRUE)
t.test(fit$diff[which(fit$cond=="fth")], fit$diff[which(fit$cond=="mth")], paired = TRUE)
load("/Users/sramoto/Desktop/monotonicity_ddm/fit-log-Fabian_BMa_new.Rdata")
wilcox.test(fit$Ter[which(fit$cond=="mth")], fit$Ter[which(fit$cond=="fth")], paired=TRUE)
t.test(fit$Ter[which(fit$cond=="mth")], fit$Ter[which(fit$cond=="fth")], paired = TRUE)
#drift rate
fit$diff = fit$v - fit$K
t.test(fit$diff[which(fit$cond=="fth")], fit$diff[which(fit$cond=="mth")], paired = TRUE)
wilcox.test(fit$diff[which(fit$cond=="fth")], fit$diff[which(fit$cond=="mth")], paired = TRUE)
load("/Users/sramoto/Desktop/monotonicity_ddm/fit-log-mth_fth_BMa_new.Rdata")
ks.test(fit$Ter[which(fit$cond=="mth")])
ks.test(fit$Ter[which(fit$cond=="mth")], pnorm)
ks.test(fit$Ter[which(fit$cond=="fth")], pnorm)
#drift rate
fit$diff = fit$v - fit$K
ks.test(fit$diff[which(fit$cond=="fth")], pnorm)
ks.test(fit$diff[which(fit$cond=="mth")], pnorm)
load("/Users/sramoto/Desktop/monotonicity_ddm/fit-log-Fabian_BMa_new.Rdata")
ks.test(fit$Ter[which(fit$cond=="fth")], pnorm)
load("/Users/sramoto/Desktop/monotonicity_ddm/fit-log-mth_fth_BM_new.Rdata")
shapiro.test(fit$a[which(fit$cond=="fth")])
shapiro.test(fit$a[which(fit$cond=="mth")])
ks.test(fit$a[which(fit$cond=="mth")], pnorm)
ks.test(fit$a[which(fit$cond=="fth")], pnorm)
# TO PLOT PARAMETERS DISTRIBUTIONS
plotparbox <- function(pname, fit) {
boxplot(fit[[pname]]~fit$cond, ylab=pname, col=1:2)
#	boxplot(fit[[pname]][fit$cond=="AC"]-fit[[pname]][fit$cond=="SP"], ylab=pname)
tmp <- t.test(fit[[pname]][fit$cond=="fth"]-fit[[pname]][fit$cond=="mth"])
#	abline(h=0, lty=3)
legend("bottomleft", legend=c(paste("t=",round(tmp$statistic,2)), paste("p=",round(tmp$p.value,3))), bty='n')
}
par(mfcol=c(2,5), las=1, mar=c(4,5,1,1))
for (pname in c('v','eta','a','Ter', "st0",'sz','z', 'K', 'B', "M")) {
plotparbox(pname, fit)
}
library(haven)
Vigilance_25_02_18_SR <- read_sav("Desktop/privet/vigilance parent/Vigilance_25.02.18_SR.sav")
View(Vigilance_25_02_18_SR)
load("/Users/sramoto/Desktop/monotonicity_ddm/fit-log-mth_fth_BMa_new.Rdata")
t.test(fit$Ter[which(fit$cond=="mth")], fit$Ter[which(fit$cond=="fth")], paired = TRUE)
#drift rate
fit$diff = fit$v - fit$K
t.test(fit$diff[which(fit$cond=="fth")], fit$diff[which(fit$cond=="mth")], paired = TRUE)
PARTICIPANT_monotonicicty_v2_2020.03.24_16h59.18.081 <- read.csv("~/Desktop/main folder/Learneblity/monotonicity/data/PARTICIPANT_monotonicicty_v2_2020-03-24_16h59.18.081.csv", header=FALSE)
View(PARTICIPANT_monotonicicty_v2_2020.03.24_16h59.18.081)
library(plyr)
library(readr)
library(ggplot2)
library(dplyr)
#set up path to data folder
setwd("/Users/sramoto/Desktop/main folder/Learneblity/Data_Prolific/monotone")
#upload csv
fnames <- list.files(".", pattern="PARTICIPANT.*csv")
data = ldply(fnames, read_csv)
test_accuracy <- aggregate(rep_test.corr ~`Prolific_ID*`, data, sum, na.rm=TRUE)
test_accuracy$block <- rep(9)
test_accuracy$accuracy <- test_accuracy$rep_test.corr/12
mean(test_accuracy$accuracy)
data_1 <- data[,c(23, 47)]
subset <-  data_1[complete.cases(data_1), ]
block <- c(1:8)
pp <- c(1:10)
subset <- cbind(subset, block=rep(rep(block, each=12),10))
subset <- cbind(subset, pp=rep(pp, each=96))
subset$pp = as.numeric(subset$pp)
subset$block = as.numeric(subset$block)
table <- table(subset$pp, subset$block, subset$key_resp_monotonicity.corr)
data_2 <- as.data.frame(table)
data_2 <- data_2[81:160,]
names(data_2)[names(data_2) == 'Var1'] <- 'pp'
names(data_2)[names(data_2) == 'Var2'] <- 'block'
data_2$accuracy <- data_2$Freq/12
data_3 <- aggregate(accuracy ~ block, data_2, mean)
data_4 <- data.frame(pp = c(1:10), block = test_accuracy$block, Var3 = rep(1), Freq = test_accuracy$rep_test.corr, accuracy = test_accuracy$accuracy)
data_4$block <- as.factor(data_4$block)
data_2 <- rbind(data_2, data_4)
monotone_plot <- ggplot(data_2, aes(x=block, y=accuracy)) +
geom_boxplot()
monotone_plot
ggsave("monotone_plot.png")
ggplot(data_2, aes(x=block, y=accuracy, color=pp)) +
geom_point()+
facet_wrap(.~pp)
test_accuracy
mean(test_accuracy$accuracy)
View(data)
subset
View(subset)
11/12
7/12
10.12
10/12
8/12
mean(test_accuracy$accuracy)
#set up path to data folder
setwd("/Users/sramoto/Desktop/main folder/Learneblity/Data_Prolific/non_monotone")
#upload csv
fnames <- list.files(".", pattern="PARTICIPANT.*csv")
data = ldply(fnames, read_csv)
test_accuracy <- aggregate(rep_test.corr ~`Prolific_ID*`, data, sum, na.rm=TRUE)
test_accuracy$block <- rep(9)
test_accuracy$accuracy <- test_accuracy$rep_test.corr/12
mean(test_accuracy$accuracy)
setwd("/Users/sramoto/Desktop/main folder/Learneblity/Data_Prolific/non_convex")
#upload csv
fnames <- list.files(".", pattern="PARTICIPANT.*csv")
data = ldply(fnames, read_csv)
test_accuracy <- aggregate(rep_test.corr ~`Prolific_ID*`, data, sum, na.rm=TRUE)
test_accuracy$block <- rep(9)
test_accuracy$accuracy <- test_accuracy$rep_test.corr/12
mean(test_accuracy$accuracy)
