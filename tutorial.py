from LOTlib3.Grammar import Grammar

# Define a grammar object
# Defaultly this has a start symbol called 'START' but we want to call 
# it 'EXPR'
grammar = Grammar(start='EXPR')

# Define some operations
# grammar.add_rule('EXPR', '(%s + %s)', ['EXPR', 'EXPR'], 1.0)
# grammar.add_rule('EXPR', '(%s * %s)', ['EXPR', 'EXPR'], 1.0)
# grammar.add_rule('EXPR', '(float(%s) / float(%s))', ['EXPR', 'EXPR'], 1.0)
# grammar.add_rule('EXPR', '(-%s)', ['EXPR'], 1.0)
# grammar.add_rule('EXPR', 'hello', None, 1.0) # A terminal, since None is the argument
# grammar.add_rule('EXPR', 'hello', [], 1.0)

# Equivalent to:
grammar.add_rule('EXPR', 'plus_', ['EXPR', 'EXPR'], 1.0)
grammar.add_rule('EXPR', 'times_', ['EXPR', 'EXPR'], 1.0)
grammar.add_rule('EXPR', 'divide_(float(%s),float(%s))', ['EXPR', 'EXPR'], 1.0)
grammar.add_rule('EXPR', 'neg_', ['EXPR'], 1.0)


# And define some numbers. We'll give them a 1/n^2 probability
for n in range(1,10):
    grammar.add_rule('EXPR', str(n), None, 10.0/n**2)

# for x in range(100):
#     t = grammar.generate()
#     print(t) 


# Hypotheses must define functions for computing priors, computing the likelihood of data, and implementing proposals in order for MCMC to work.
# In most cases, a hypothesis will represent a single production from the grammar.
from math import log
from LOTlib3.Hypotheses.LOTHypothesis import LOTHypothesis

# define a hypothesis class for our experiment (all hypotheses generated by grammar fit under this type)
class MyHypothesis(LOTHypothesis):
    def __init__(self, **kwargs):
        LOTHypothesis.__init__(self, grammar=grammar, **kwargs) # Hypotheses will be displayed after the string 'lambda x:'

    # Compute likelihood given a single piece of data
    # Expects a piece of data with input, output, and alpha (maybe something like response/true/alpha)
    def compute_single_likelihood(self, datum):
        if self(*datum.input) == datum.output: # LOTHypothesis class's self can be thought of as a function
            return log((1.0-datum.alpha)/100. + datum.alpha)
        else:
            return log((1.0-datum.alpha)/100.)


# Example data (only one)
from LOTlib3.DataAndObjects import FunctionData
data = [ FunctionData(input=[6], output=12, alpha=0.95) ]


# Make an example hypothesis
h = MyHypothesis()
print (h.compute_prior(), h.compute_likelihood(data), h)